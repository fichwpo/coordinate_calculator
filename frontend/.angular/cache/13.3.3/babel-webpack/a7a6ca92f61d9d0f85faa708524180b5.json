{"ast":null,"code":"import _asyncToGenerator from \"/Users/pranav/Desktop/Fetch_Rewards/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CoordinateService {\n  constructor(http) {}\n\n  getSolution(request_bodies) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const payload = JSON.stringify({\n        \"list\": request_bodies\n      });\n      const url = \"http://127.0.0.1:5000/calculate\";\n      const myHeaders = new Headers();\n      myHeaders.append(\"Body-Type\", \"list\");\n      myHeaders.append(\"Content-Type\", \"application/json\");\n      myHeaders.append(\"Origin\", \"http://localhost/4200\");\n      myHeaders.append(\"Access-Control-Allow-Origin\", \"http://127.0.0.1:5000/calculate\");\n      let requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: payload,\n        redirect: \"follow\"\n      };\n      return _this.http.post(url, payload, requestOptions);\n    })();\n  }\n\n}\n\nCoordinateService.ɵfac = function CoordinateService_Factory(t) {\n  return new (t || CoordinateService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nCoordinateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CoordinateService,\n  factory: CoordinateService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/pranav/Desktop/Fetch_Rewards/frontend/src/app/services/coordinate.service.ts"],"names":["i0","i1","CoordinateService","constructor","http","getSolution","request_bodies","payload","JSON","stringify","url","myHeaders","Headers","append","requestOptions","method","headers","body","redirect","post","ɵfac","CoordinateService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,iBAAN,CAAwB;AAC3BC,EAAAA,WAAW,CAACC,IAAD,EAAO,CAAG;;AACfC,EAAAA,WAAW,CAACC,cAAD,EAAiB;AAAA;;AAAA;AAC9B,YAAMC,OAAO,GAAGC,IAAI,CAACC,SAAL,CAAe;AAC3B,gBAAQH;AADmB,OAAf,CAAhB;AAGA,YAAMI,GAAG,GAAG,iCAAZ;AACA,YAAMC,SAAS,GAAG,IAAIC,OAAJ,EAAlB;AACAD,MAAAA,SAAS,CAACE,MAAV,CAAiB,WAAjB,EAA8B,MAA9B;AACAF,MAAAA,SAAS,CAACE,MAAV,CAAiB,cAAjB,EAAiC,kBAAjC;AACAF,MAAAA,SAAS,CAACE,MAAV,CAAiB,QAAjB,EAA2B,uBAA3B;AACAF,MAAAA,SAAS,CAACE,MAAV,CAAiB,6BAAjB,EAAgD,iCAAhD;AACA,UAAIC,cAAc,GAAG;AACjBC,QAAAA,MAAM,EAAE,MADS;AAEjBC,QAAAA,OAAO,EAAEL,SAFQ;AAGjBM,QAAAA,IAAI,EAAEV,OAHW;AAIjBW,QAAAA,QAAQ,EAAE;AAJO,OAArB;AAMA,aAAO,KAAI,CAACd,IAAL,CAAUe,IAAV,CAAeT,GAAf,EAAoBH,OAApB,EAA6BO,cAA7B,CAAP;AAhB8B;AAiBjC;;AAnB0B;;AAqB/BZ,iBAAiB,CAACkB,IAAlB,GAAyB,SAASC,yBAAT,CAAmCC,CAAnC,EAAsC;AAAE,SAAO,KAAKA,CAAC,IAAIpB,iBAAV,EAA6BF,EAAE,CAACuB,QAAH,CAAYtB,EAAE,CAACuB,UAAf,CAA7B,CAAP;AAAkE,CAAnI;;AACAtB,iBAAiB,CAACuB,KAAlB,GAA0B,aAAczB,EAAE,CAAC0B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEzB,iBAAT;AAA4B0B,EAAAA,OAAO,EAAE1B,iBAAiB,CAACkB,IAAvD;AAA6DS,EAAAA,UAAU,EAAE;AAAzE,CAAtB,CAAxC","sourcesContent":["import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CoordinateService {\n    constructor(http) { }\n    async getSolution(request_bodies) {\n        const payload = JSON.stringify({\n            \"list\": request_bodies\n        });\n        const url = \"http://127.0.0.1:5000/calculate\";\n        const myHeaders = new Headers();\n        myHeaders.append(\"Body-Type\", \"list\");\n        myHeaders.append(\"Content-Type\", \"application/json\");\n        myHeaders.append(\"Origin\", \"http://localhost/4200\");\n        myHeaders.append(\"Access-Control-Allow-Origin\", \"http://127.0.0.1:5000/calculate\");\n        let requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: payload,\n            redirect: \"follow\",\n        };\n        return this.http.post(url, payload, requestOptions);\n    }\n}\nCoordinateService.ɵfac = function CoordinateService_Factory(t) { return new (t || CoordinateService)(i0.ɵɵinject(i1.HttpClient)); };\nCoordinateService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: CoordinateService, factory: CoordinateService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}